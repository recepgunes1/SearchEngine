networks:
  backend:
  fronted:

services:
  gateway.webapi:
    image: searchengine/gateway.webapi
    build:
      context: .
      dockerfile: services/Gateway/Gateway.WebAPI/Dockerfile
    networks:
      - backend
      - fronted
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
    restart: always

  urlregister.webapi:
    image: searchengine/urlregister.webapi
    build:
      context: .
      dockerfile: services/UrlRegister/UrlRegister.WebAPI/Dockerfile
    networks:
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
    restart: always

  searchhub.webapi:
    image: searchengine/searchhub.webapi
    build:
      context: .
      dockerfile: services/SearchHub/SearchHub.WebAPI/Dockerfile
    networks:
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
    restart: always

  summarizer.webapi:
    image: searchengine/summarizer.webapi
    build:
      context: .
      dockerfile: services/Summarizer/Dockerfile
    networks:
      - backend
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
    restart: always

  pagedownloader.worker:
    image: searchengine/pagedownloader.worker
    build:
      context: .
      dockerfile: services/PageDownloader/PageDownloader.Worker/Dockerfile
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=${ENVIRONMENT}
    restart: always

  tagextractor.worker:
    image: searchengine/tagextractor.worker
    build:
      context: .
      dockerfile: services/TagExtractor/TagExtractor.Worker/Dockerfile
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=${ENVIRONMENT}
    restart: always

  urlextractor.worker:
    image: searchengine/urlextractor.worker
    build:
      context: .
      dockerfile: services/UrlExtractor/UrlExtractor.Worker/Dockerfile
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=${ENVIRONMENT}
    restart: always

  syncelastic.worker:
    image: syncelastic.worker
    build:
      context: .
      dockerfile: services/SyncElastic/SyncElastic.Worker/Dockerfile
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=${ENVIRONMENT}
    restart: always

  client.webapp:
    image: searchengine/client.webapp
    build:
      context: .
      dockerfile: clients/WebApp/Dockerfile
    networks:
      - fronted
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
    restart: always

