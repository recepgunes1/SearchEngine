networks:
  backend:
  fronted:

services:
  gateway.webapi:
    image: searchengine/gateway.webapi
    build:
      context: .
      dockerfile: services/Gateway/Gateway.WebAPI/Dockerfile
    ports:
      - "5010:8080"
      - "5011:8081"
    networks:
      - backend
      - fronted
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}

  urlregister.webapi:
    image: searchengine/urlregister.webapi
    build:
      context: .
      dockerfile: services/UrlRegister/UrlRegister.WebAPI/Dockerfile
    ports:
      - "5020:8080"
      - "5021:8081"
    networks:
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}

  searchhub.webapi:
    image: searchengine/searchhub.webapi
    build:
      context: .
      dockerfile: services/SearchHub/SearchHub.WebAPI/Dockerfile
    ports:
      - "5030:8080"
      - "5031:8081"
    networks:
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}

  pagedownloader.worker:
    image: searchengine/pagedownloader.worker
    build:
      context: .
      dockerfile: services/PageDownloader/PageDownloader.Worker/Dockerfile
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=${ENVIRONMENT}

  tagextractor.worker:
    image: searchengine/tagextractor.worker
    build:
      context: .
      dockerfile: services/TagExtractor/TagExtractor.Worker/Dockerfile
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=${ENVIRONMENT}

  urlextractor.worker:
    image: searchengine/urlextractor.worker
    build:
      context: .
      dockerfile: services/UrlExtractor/UrlExtractor.Worker/Dockerfile
    networks:
      - backend
    environment:
      - DOTNET_ENVIRONMENT=${ENVIRONMENT}

  client.webapp:
    image: searchengine/client.webapp
    build:
      context: .
      dockerfile: clients/WebApp/Dockerfile
    networks:
      - fronted
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
